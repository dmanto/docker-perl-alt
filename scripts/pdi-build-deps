#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;

################################################
# Usage

sub usage {
  die <<EOU;
Usage: pdi-build-deps [<options>] [<cpanfile>]

Uses the cpanfile (and cpanfile.snapshot, if present) files to install
the Perl dependencies we need.

You can use a different name ('cpanfile' is only the default) by passing
along the file as a parameter (the <cpanfile> in the usage above).

This script supports two modes:

  * app dependencies (the default): installed under /deps;
  * stack dependencies: installed under /stack

The default is to install app dependencies, use --stack to install stack
dependencies.

Options:

  --help, -?       This message

  --stack          Install dependencies for the stack
  --skip-snapshot  Ignore the cpanfile.snapshot, even if present

EOU
}


################################################
# Main logic

### Parse our options and deal with bad ones or --help
my $ok = GetOptions(\my %opts, 'stack', 'skip-snapshot', 'verbose', 'help|?');
usage() unless $ok;
usage() if $opts{help};

my $cpanfile = $ARGV[0] || 'cpanfile';
my $snapshot = "${cpanfile}.snapshot";


### We need at least the cpanfile
die "FATAL: no '$cpanfile' file found\n" unless -e $cpanfile;


### Prepare our cpm cmd, decide on final deployment or not
my @cmd = ('cpm', 'install', '--workers', 10, '-L', 'local/', '--no-prebuilt', '--no-test');
push @cmd, '--mirror', '/mirror', '--resolver', '02packages,/mirror', '--resolver', 'metadb' if -d '/mirror';
push @cmd, '--verbose' if $opts{verbose};


### Destination dir for deps depends on app or stack mode
my $deps_dir = $opts{stack} ? '/stack' : '/deps';


### Prepare the cpanfiles required
system('/bin/cp', $cpanfile, "$deps_dir/cpanfile");
if (-e $snapshot and !$opts{'skip-snapshot'}) { system('/bin/cp', $snapshot, "$deps_dir/cpanfile.snapshot") }
else                                          { system('/bin/rm', "$deps_dir/cpanfile.snapshot") }
chdir($deps_dir);


### Take care of running cpm, twice
print "\n\n*** First run '@cmd'\n\n";
run_cmd();

print "\n\n*** ERROR: command '@cmd' exit code ", ($? >> 8), ", retrying\n\n";
run_cmd();


### If we end up here, we could not execute cpm sucessfuly, dump log and die
print "\n\n*** ERROR: command '@cmd' exit code ", ($? >> 8), ", second failure, aborting\n";
print "             build.log output follows:\n\n";
system('/bin/cat', "$ENV{HOME}/.perl-cpm/build.log");
print "\n\n*** End of build.log file\n\n";

exit(1);


################################################
# Helpers

sub run_cmd {
  system(@cmd);
  if ($? == 0) {
    exec('/bin/rm', '-rf', 'local/cache', "$ENV{HOME}/.cpanm*", "$ENV{HOME}/.perl-cpm*");
    die "FATAL: failed to exec() '/bin/rm': $?";
  }
}
